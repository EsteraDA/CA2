#!/usr/bin/env python
# coding: utf-8

# In[2]:


import base64
import io
import pandas as pd
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import ttk
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


# defining the base64-encoded CSV data
base64_data =  ''

# removing leading/trailing whitespace from the base64 data
base64_data = base64_data.strip()

# decoding the base64-encoded CSV data
csv_bytes = base64.b64decode(base64_data)

# loading the DataFrame from the CSV data
df = pd.read_csv(io.BytesIO(csv_bytes))

# declaring chart and review acanvas as a global variable
chart_canvas = None
review_canvas = None  

def update_chart():
    global chart_canvas, review_canvas 

    selected_date = dropdown.get()
    if selected_date != '':
        sentiment_scores = df.loc[df['Date'] == selected_date, 'sentiment']
        num_reviews = sentiment_scores.shape[0]
        sentiment_label.config(text=f"Sentiment Score: {sentiment_scores.mean():.2f}")
        reviews_label.config(text=f"Number of Reviews: {num_reviews}")

        # clearing the existing chart canvas and review canvas, if any
        if chart_canvas:
            chart_canvas.destroy()
        if review_canvas:
            review_canvas.destroy()

        # creating a new canvas for the chart
        chart_canvas = tk.Canvas(root, width=600, height=400)
        chart_canvas.pack(side=tk.LEFT)

        # plotting the bar chart with smaller size
        fig = plt.Figure(figsize=(6, 4))
        ax = fig.add_subplot(111)
        ax.bar(range(num_reviews), sentiment_scores)
        ax.set_xlabel('Review Index')
        ax.set_ylabel('Sentiment Score')
        ax.set_title('Sentiment Scores for Selected Date')

        # setting the x-tick labels to show the review numbers
        ax.set_xticks(range(num_reviews))
        ax.set_xticklabels(range(1, num_reviews + 1))

        # converting the Matplotlib figure to a Tkinter-compatible canvas
        chart = FigureCanvasTkAgg(fig, master=chart_canvas)
        chart.draw()

        # placing the chart canvas within the new canvas
        chart.get_tk_widget().pack()

    else:
        sentiment_label.config(text="Sentiment Score: N/A")
        reviews_label.config(text="Number of Reviews: N/A")
        if chart_canvas:
            chart_canvas.destroy()
        if review_canvas:
            review_canvas.destroy()

def show_sentiment_score():
    update_chart()
    


def show_reviews():
    global chart_canvas, review_canvas

    selected_date = dropdown.get()
    if selected_date != '':
        reviews = df.loc[df['Date'] == selected_date, 'Review'].tolist()
        if reviews:
            if chart_canvas:
                chart_canvas.destroy()
            if review_canvas:
                review_canvas.destroy()

            review_canvas = tk.Canvas(root, width=600, height=300)
            review_canvas.pack(side=tk.LEFT)

            review_text = tk.Text(review_canvas, height=8, width=80)
            review_text.insert(tk.END, "\n".join(reviews))
            review_text.pack()

root = tk.Tk()

# selecting unique date from df to be in a dropdown menu later
dates = df['Date'].unique().tolist()

# aligning the canvas to the left side
canvas1 = tk.Canvas(root, width=300, height=300)
canvas1.pack(side=tk.LEFT)

label1 = tk.Label(root, text='Sentiment Score')
label1.config(font=('Arial', 20))
canvas1.create_window(150, 50, window=label1)

# creating a label to display the sentiment score
sentiment_label = tk.Label(root, text="Sentiment Score: N/A")
sentiment_label.config(font=('Arial', 14))
canvas1.create_window(150, 150, window=sentiment_label)

# creating a label to display the number of reviews
reviews_label = tk.Label(root,text="Number of Reviews: N/A")
reviews_label.config(font=('Arial', 14))
canvas1.create_window(150, 180, window=reviews_label)

# creating a dropdown menu positioned between the labels
dropdown = ttk.Combobox(root, values=dates)
dropdown.current(0)  # Set the default selection index (change as needed)
canvas1.create_window(150, 210, window=dropdown)

# creating a button to show the sentiment score and update the chart
show_score_button = tk.Button(root, text="Show Sentiment Score and Bar Chart", command=update_chart)
canvas1.create_window(150, 250, window=show_score_button)

# creating a button to show the reviews
show_reviews_button = tk.Button(root, text="Show Reviews", command=show_reviews)
canvas1.create_window(150, 280, window=show_reviews_button)

root.mainloop()


# In[ ]:





# In[ ]:




